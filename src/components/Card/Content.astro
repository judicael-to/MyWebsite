---
import type { TranslationKey } from "../../lib/i18n/translations";
import { getTranslation } from "../../lib/i18n/translations";

interface Props {
  title?: TranslationKey;
  body?: string;
}

const { title, body } = Astro.props;
const currentLang = Astro.cookies.get('language')?.value || 'fr';

const translatedTitle = title ? getTranslation(title, currentLang) : '';
---

{title && 
  <h2 data-translation-key={title}>
    {translatedTitle}
  </h2>
}
{body && <p class="m-0 font-light text-base">{body}</p>}
<slot />

<script>
  import type { TranslationKey } from "../../lib/i18n/translations";
  import { getTranslation } from "../../lib/i18n/translations";

  function updateTitle(element: HTMLElement, translationKey: TranslationKey, lang: string) {
    if (!element || !translationKey) return;
    const translatedText = getTranslation(translationKey, lang);
    element.textContent = translatedText;
  }

  // Update all titles when language changes
  window.addEventListener('languagechange', (event: Event) => {
    const lang = (event as CustomEvent).detail.language;
    const titles = document.querySelectorAll('h2[data-translation-key]');
    
    titles.forEach((titleElement) => {
      const translationKey = (titleElement as HTMLElement).dataset.translationKey as TranslationKey;
      if (translationKey) {
        updateTitle(titleElement as HTMLElement, translationKey, lang);
      }
    });
  });

  // Also update when the page loads
  document.addEventListener('astro:page-load', () => {
    const lang = document.documentElement.lang || 'fr';
    const titles = document.querySelectorAll('h2[data-translation-key]');
    
    titles.forEach((titleElement) => {
      const translationKey = (titleElement as HTMLElement).dataset.translationKey as TranslationKey;
      if (translationKey) {
        updateTitle(titleElement as HTMLElement, translationKey, lang);
      }
    });
  });
</script>
