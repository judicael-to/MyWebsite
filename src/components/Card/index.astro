---
import { Icon } from 'astro-icon/components'
import Content from "./Content.astro";
import type { TranslationKey } from "../../lib/i18n/translations";

interface Props {
  title?: TranslationKey;
  body?: string;
  colSpan?: string;
  rowSpan?: string;
  href?: string;
  colorText?: string;
  gradient?: number;
}

const { title, body, colSpan, rowSpan, href, colorText, gradient = 1 } = Astro.props;
---

<div
  class={`card group overflow-hidden bg-darkslate-500 shadow-lg rounded-lg p-6 border border-darkslate-100 align-start flex-none justify-start relative transform perspective-1200 w-full transition-all duration-300 ease-in-out col-span-1 h-auto ${
    colSpan || "md:col-span-2"
  } ${rowSpan || ""}`}
  data-gradient={gradient}
>
  {
    href ? (
      <a href={href} class={`h-full w-full ${colorText || " "}`}>
        <Icon
          name="ri:arrow-right-up-line"
          class="h-6 float-right transition-transform ease-in-out duration-200 z-20 card-arrow"
        />
        <Content title={title} body={body}>
          <slot />
        </Content>
      </a>
    ) : (
      <Content title={title} body={body}>
        <slot />
      </Content>
    )
  }
</div>

<style>
  .card {
    background-color: var(--card-background);
    color: var(--text-primary);
    border-color: var(--border-color);
    box-shadow: 0px 0px 10px var(--shadow-color, rgba(194, 141, 255, 0.5));
    transition: all 0.3s ease;
  }
  
  .card[data-gradient="1"] {
    background: var(--card-gradient-1);
  }

  .card[data-gradient="2"] {
    background: var(--card-gradient-2);
  }
  
  .card[data-gradient="3"] {
    background: var(--card-gradient-3);
  }
  
  .card[data-gradient="4"] {
    background: var(--card-gradient-4);
  }

  .card[data-gradient="5"] {
    background: var(--card-gradient-5);
  }

  .card[data-gradient="6"] {
    background: var(--card-gradient-6);
  }

  .card[data-gradient="7"] {
    background: var(--card-gradient-7);
  }

  .card[data-gradient="8"] {
    background: var(--card-gradient-8);
  }

  .card:hover {
    transform: translateY(-2px);
    box-shadow: 0 0 28px var(--shadow-color-hover, rgba(141, 255, 160, 0.3));
    border-color: var(--border-hover, rgb(0, 255, 102, 0.5));
  }

  .card:hover .card-arrow {
    transform: translate(4px, -4px);
    color: var(--border-hover, rgb(0, 255, 102, 0.5));
  }

  a {
    text-decoration: none;
    color: var(--text-primary);
  }

  /* Ensure hover effects work on both light and dark themes */
  :root.light .card:hover {
    border-color: rgb(255, 0, 0);
    box-shadow: 0 0 28px rgba(0, 0, 0, 0.5);
  }
  
  :root.light .card:hover .card-arrow {
    color: rgb(255, 0, 0);
  }
</style>

<script>
  // Ensure hover effects work by adding event listeners
  document.addEventListener('astro:page-load', () => {
    const cards = document.querySelectorAll('.card');
    
    cards.forEach(card => {
      card.addEventListener('mouseenter', () => {
        const arrow = card.querySelector('.card-arrow') as HTMLElement;
        if (arrow) {
          arrow.style.transform = 'translate(4px, -4px)';
          if (document.documentElement.classList.contains('light')) {
            arrow.style.color = 'rgb(255, 0, 0)';
          } else {
            arrow.style.color = 'rgb(0, 255, 102, 0.5)';
          }
        }
      });
      
      card.addEventListener('mouseleave', () => {
        const arrow = card.querySelector('.card-arrow') as HTMLElement;
        if (arrow) {
          arrow.style.transform = '';
          arrow.style.color = '';
        }
      });
    });
  });
</script>
