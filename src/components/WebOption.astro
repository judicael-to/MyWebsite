---
import Card from "./Card/index.astro";
import { Icon } from "astro-icon/components";
import { getTranslation } from "../lib/i18n/translations";

const currentLang = Astro.cookies.get('language')?.value || localStorage.getItem('language') || 'fr';
---

<Card colSpan="md:col-span-1" rowSpan="md:row-span-2" gradient={2}>
  <div class="flex flex-col gap-4">
    <div class="flex flex-col justify-center items-center">
      <button id="themeToggle" class="w-fit flex items-center px-4 py-2">
        <Icon name="ri:moon-line" class="h-5 theme-toggle-light"/>
        <Icon name="ri:sun-line" class="h-5 theme-toggle-dark"/>
        <span class="theme-text">{getTranslation('theme.dark', currentLang)}</span>
      </button>
    </div>

    <div class="w-full h-[1px] background-third"></div>

    <div class="flex flex-col justify-center items-center">
      <div class="flex gap-6">
        <button class="language-btn custom-btn px-3 py-1" data-lang="en">English</button>
        <button class="language-btn custom-btn px-3 py-1 active" data-lang="fr">Fran√ßais</button>
      </div>
    </div>
  </div>
</Card>

<script>
  import { getTranslation } from "../lib/i18n/translations";

  const themeToggle = document.getElementById('themeToggle');
  const themeText = document.querySelector('.theme-text');
  
  // Check for saved theme preference, otherwise use system preference
  const getPreferredTheme = (): 'light' | 'dark' => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'light' || savedTheme === 'dark') {
      return savedTheme;
    }
    return window.matchMedia('(prefers-color-scheme: light)').matches ? 'light' : 'dark';
  };

  // Function to set theme
  const setTheme = (theme: 'light' | 'dark') => {
    const lang = document.documentElement.lang || localStorage.getItem('language') || 'fr';
    if (theme === 'light') {
      document.documentElement.classList.add('light');
      if (themeText) themeText.textContent = getTranslation('theme.light', lang);
    } else {
      document.documentElement.classList.remove('light');
      if (themeText) themeText.textContent = getTranslation('theme.dark', lang);
    }
    localStorage.setItem('theme', theme);
  };

  // Initialize theme
  setTheme(getPreferredTheme());

  // Handle theme toggle
  themeToggle?.addEventListener('click', () => {
    const isLight = document.documentElement.classList.contains('light');
    setTheme(isLight ? 'dark' : 'light');
  });

  // Handle system theme changes
  window.matchMedia('(prefers-color-scheme: light)').addEventListener('change', (e) => {
    setTheme(e.matches ? 'light' : 'dark');
  });

  // Language selection
  const languageBtns = document.querySelectorAll<HTMLButtonElement>('.language-btn');
  
  // Function to set active language button
  const setActiveLanguage = (lang: string) => {
    console.log('Setting active language:', lang);
    
    languageBtns.forEach(btn => {
      if (btn.dataset.lang === lang) {
        btn.classList.add('active');
      } else {
        btn.classList.remove('active');
      }
    });

    // Update storage and document
    localStorage.setItem('language', lang);
    document.documentElement.lang = lang;
    document.cookie = `language=${lang};path=/;max-age=31536000`; // 1 year
    
    // Update theme text based on current theme and new language
    const isLight = document.documentElement.classList.contains('light');
    if (themeText) {
      themeText.textContent = getTranslation(isLight ? 'theme.light' : 'theme.dark', lang);
    }
    
    // Dispatch the language change event
    const event = new CustomEvent('languagechange', { 
      detail: { language: lang },
      bubbles: true,
      composed: true
    });
    console.log('Dispatching languagechange event:', event);
    window.dispatchEvent(event);
  };

  // Initialize active language from storage or default
  const storedLang = localStorage.getItem('language') || document.documentElement.lang || 'fr';
  setActiveLanguage(storedLang);

  // Add click handlers to language buttons
  languageBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const lang = btn.dataset.lang;
      if (lang) {
        console.log('Language button clicked:', lang);
        setActiveLanguage(lang);
      }
    });
  });
</script>

<style>
  :root.light .theme-toggle-light {
    display: none;
  }
  :root:not(.light) .theme-toggle-dark {
    display: none;
  }
  .language-btn {
    font-size: 0.875rem;
    transition: all 0.2s ease-in-out;
  }
  .language-btn.active {
    background-color: var(--button-hover);
    transform: translateY(-2px);
    box-shadow: 2px 2px 0 var(--shadow-color);
  }
  .background-third {
    background-color: var(--background-third);
  }
  .custom-btn {
    background-color: var(--button-bg);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    box-shadow: 2px 2px 0 var(--shadow-color);
  }
  .custom-btn:hover {
    background-color: var(--button-hover);
    transform: translateY(-2px);
    box-shadow: 3px 3px 0 var(--shadow-color);
  }
  .custom-btn:active {
    transform: translate(2px, 2px);
    box-shadow: none;
  }
</style>