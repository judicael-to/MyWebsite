---
import Card from "./Card/index.astro";
import Button from "./Button.astro";
import { LINKS } from "../lib/constants";
import { Icon } from "astro-icon/components";
import Tooltip from "./Tooltip/index";
import { getTranslation } from "../lib/i18n/translations";
import Content from "./Card/Content.astro";
import MixedFontStyles from "./Card/MixedFontStyles.astro";

const currentLang = Astro.cookies.get('language')?.value || 'fr';
const name = "JUDICAEL";

function wrapWithMixedFontSpans(text: string): string {
  return text.split('').map((char: string, i: number) => {
    const classNum = (i % 26) + 1;
    return `<span class="char${classNum} font-transition" data-char="${char}">${char}</span>`;
  }).join('');
}

const nameHtml = wrapWithMixedFontSpans(name);
---

<Card colSpan="md:col-span-3" rowSpan="md:row-span-4" gradient={1}>
  <div class="flex w-full h-full flex-col md:flex-row">
    <div class="flex flex-col justify-between md:max-h-[300px] gap-4">
      <div class="flex flex-col h-full">
        <div class="flex flex-col gap-2">
          <div class="text-xl font-bold text-primary m-0">
            <Content title="intro.greeting" />
          </div>
          <div class="text-6xl text-primary m-0">
            <MixedFontStyles />
            <div id="judicael-name" class="mixed-font judicael-name" set:html={nameHtml} />
          </div>
        </div>
        <p class="intro-description m-0 font-light text-xl text-primary mt-4">
          {getTranslation('intro.description', currentLang)}
        </p>
      </div>
      <div class="flex gap-4">
        <a href={LINKS.github} aria-label="github profile" target="_blank" class="transition-transform hover:scale-105">
          <Button aria-label="github profile">
            <Icon name="ri:github-fill" class="h-6" />
            <span class="sr-only">GitHub Profile</span>
          </Button>
        </a>
        <a href={LINKS.linkedin} aria-label="linkedin profile" target="_blank" class="transition-transform hover:scale-105">
          <Button aria-label="linkedin profile">
            <Icon name="ri:linkedin-box-fill" class="h-6" />
            <span class="sr-only">Linkedin Profile</span>
          </Button>
        </a>
        <div class="transition-transform hover:scale-105">
          <Tooltip client:visible>
            <Button aria-label="easter egg btn">
              <Icon name="ri:emotion-laugh-line" class="h-6" />
              <span class="sr-only">Easter egg button</span>
            </Button>
          </Tooltip>
        </div>
      </div>
    </div>
    <img
      width="300"
      height="300"
      src="/me.webp"
      class="w-auto max-h-[300px] select-none md:relative md:right-auto md:bottom-auto md:z-auto pointer-events-none transition-opacity hover:opacity-95 mx-auto md:mx-0 mt-4 md:mt-0"
      alt="memoji of judicael"
    />
  </div>
</Card>

<style>
  .text-secondary {
    color: var(--text-secondary);
  }
  
  .text-primary {
    color: var(--text-primary);
  }
  
  .font-transition {
    transition: color 0.3s ease-in-out;
  }
  
  .judicael-name span {
    display: inline-block;
    position: relative;
    padding: 0 2px;
  }

</style>

<script>
  import { getTranslation } from "../lib/i18n/translations";

  function updateTranslations(lang: string) {
    // Get all elements that need translation using specific class selectors
    const description = document.querySelector('.intro-description');

    try {
      if (description) {
        const descText = getTranslation('intro.description', lang);
        description.textContent = descText;
      }
    } catch (error) {
      console.error('Error updating translations:', error);
    }
  }

  // Remove the global counter and interval to simplify the script
  let fontInterval: number | null = null;

  // Simpler function to shuffle the font assignments for "JUDICAEL"
  function startNameFontShuffler() {
    try {
      if (fontInterval) {
        clearInterval(fontInterval);
        fontInterval = null;
      }
      
      const nameElement = document.getElementById('judicael-name');
      console.log("Font shuffler starting, element found:", !!nameElement);
      
      if (!nameElement) return;
      
      // Initial setup
      const name = "JUDICAEL";
      const existingSpans = nameElement.querySelectorAll('span');
      
      // Only create spans if they don't exist
      if (existingSpans.length !== name.length) {
        console.log("Creating initial spans for", name);
        nameElement.innerHTML = "";
        
        name.split('').forEach((char, i) => {
          const span = document.createElement('span');
          span.textContent = char;
          span.setAttribute('data-char', char);
          span.classList.add(`char${(i % 26) + 1}`);
          span.classList.add('font-transition');
          nameElement.appendChild(span);
        });
      }
      
      // Change one character at a time in sequence
      let currentIndex = 0;
      
      function changeCharacter() {
        try {
          // Get all spans
          const spans = document.querySelectorAll('#judicael-name span');
          if (!spans || spans.length === 0) return;
          
          // Get the current character to change
          const span = spans[currentIndex];
          
          // Generate a random font class
          const randomClass = Math.floor(Math.random() * 26) + 1;
          
          // Remove all existing font classes
          for (let i = 1; i <= 26; i++) {
            span.classList.remove(`char${i}`);
          }
          
          // Add the new font class
          span.classList.add(`char${randomClass}`);
          
          // Move to next character
          currentIndex = (currentIndex + 1) % spans.length;

          // If we've completed one full loop, reset to first character after 10s
          if (currentIndex === 0) {
            // Clear the current interval
            if (fontInterval) {
              clearInterval(fontInterval);
              fontInterval = null;
            }
            // Set a new interval after 10 seconds
            setTimeout(() => {
              currentIndex = 0; // Reset to first character
              fontInterval = window.setInterval(changeCharacter, 100);
            }, 10000);
          }
        } catch (err) {
          console.error("Error changing character:", err);
        }
      }

      // Change a character every 200ms
      fontInterval = window.setInterval(changeCharacter, 100);
    } catch (error) {
      console.error("Error in font shuffler:", error);
    }
  }

  // Initialize with a simple approach
  function initFontShuffler() {
    console.log("Initializing font shuffler");
    const lang = document.documentElement.lang || 'fr';
    updateTranslations(lang);
    
    // Ensure any previous interval is cleared
    if (fontInterval) {
      clearInterval(fontInterval);
      fontInterval = null;
    }
    
    // Start with a delay to ensure the DOM is fully loaded
    setTimeout(startNameFontShuffler, 500);
  }

  // Update translations when language changes
  window.addEventListener('languagechange', (event: Event) => {
    const lang = (event as CustomEvent).detail.language;
    updateTranslations(lang);
  });

  // Simple initialization that works across browsers
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initFontShuffler);
  } else {
    initFontShuffler();
  }
  
  // Re-initialize when Astro loads a new page
  document.addEventListener('astro:page-load', initFontShuffler);
</script>
