---
import { getTranslation } from "../lib/i18n/translations";
interface Props {
  title: string;
  description: string;
  page?: "travel";
}

const { title, description, page } = Astro.props;
const image =
  page ==="travel" && `${Astro.url.origin}/me.webp`;
const currentLang = Astro.cookies.get('language')?.value || 'fr';
const welcomeText = getTranslation('welcome', currentLang);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta name="robots" content="/favicon/sitemap-index.xml" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:type" content="website" />
    <meta property="og:url" content={Astro.url.origin} />
    <!-- Basic Twitter Card tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />

    <link rel="preconnect" href="https://cdn.fontshare.com" />
  </head>
  <body
    class="md:h-screen flex flex-col justify-center items-center transition-all duration-300"
  >
    <div id="welcome-background" class="welcome-background" data-translation-key="welcome">
      {welcomeText}
    </div>
    <slot name="loader" />
    <slot />
  </body>
</html>

<style is:global>
  @font-face {
    font-family: "CabinetGrotesk";
    src: url("/fonts/CabinetGrotesk-Variable.ttf") format("truetype-variations");
    font-weight: normal;
    font-style: normal;
    font-display: swap;
    font-weight: 100 1000;
  }
  @font-face {
    font-family: "Satoshi";
    src: url("/fonts/Satoshi-Variable.ttf") format("truetype-variations");
    font-weight: normal;
    font-style: normal;
    font-display: swap;
    font-weight: 100 1000;
  }

  body {
    margin: 0;
    font-family: "Satoshi", sans-serif;
    -webkit-font-smoothing: antialiased;
    background-color: var(--background);
    background-image:
      radial-gradient(circle at 100% 0, rgba(255, 255, 255, 0.1) 0, transparent 3px),
      radial-gradient(circle at 0 100%, rgba(255, 255, 255, 0.1) 0, transparent 3px),
      radial-gradient(circle at 100% 100%, rgba(255, 255, 255, 0.1) 0, transparent 3px),
      radial-gradient(circle at 0 0, rgba(255, 255, 255, 0.1) 0, transparent 3px);
    background-size: 50px 50px;
    transition: background-color 0.3s ease;
    position: relative;
  }

  html.light body {
    background-color: var(--background);
    background-image:
      radial-gradient(circle at 100% 0, rgba(0, 0, 0, 0.1) 0, transparent 3px),
      radial-gradient(circle at 0 100%, rgba(0, 0, 0, 0.1) 0, transparent 3px),
      radial-gradient(circle at 100% 100%, rgba(0, 0, 0, 0.1) 0, transparent 3px),
      radial-gradient(circle at 0 0, rgba(0, 0, 0, 0.1) 0, transparent 3px);
  }

  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    font-family: "Cabinet Grotesk", sans-serif;
  }
  p {
    font-family: "Satoshi";
  }

  b {
    font-weight: 700 !important;
  }
  
  .welcome-background {
    position: fixed;
    bottom: -60px;
    left: 0;
    font-size: 12rem;
    font-weight: 900;
    color: rgba(255, 255, 255, 0.05);
    z-index: -1;
    letter-spacing: 0.1em;
    user-select: none;
    pointer-events: none;
    text-transform: uppercase;
  }
  
  html.light .welcome-background {
    color: rgba(0, 0, 0, 0.05);
  }
</style>

<script>
  import type { TranslationKey } from "../lib/i18n/translations";
  import { getTranslation } from "../lib/i18n/translations";

  // Function to update the welcome text based on language
  function updateWelcomeText(lang: string) {
    const welcomeElement = document.getElementById('welcome-background');
    if (welcomeElement) {
      const translationKey = welcomeElement.getAttribute('data-translation-key');
      if (translationKey) {
        welcomeElement.textContent = getTranslation(translationKey as TranslationKey, lang);
      }
    }
  }
  
  // Listen for language change events
  window.addEventListener('languagechange', (event: Event) => {
    const lang = (event as CustomEvent).detail.language;
    updateWelcomeText(lang);
  });
  
  // Initialize on page load
  document.addEventListener('astro:page-load', () => {
    const lang = document.documentElement.lang || 'fr';
    updateWelcomeText(lang);
  });
</script>
